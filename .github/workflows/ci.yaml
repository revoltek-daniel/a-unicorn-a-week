name: Build and Deploy
on:
  push:
    branches:
      -   master

jobs:
  unit-tests:
    name: Unit Tests
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@master
      - name: Setup PHP, extensions and composer with shivammathur/setup-php
        uses: shivammathur/setup-php@v2
        with:
          php-version: "8.3"
          tools: composer
          coverage: pcov
      # Composer
      - name: Get composer cache directory
        id: composer-cache
        run: echo "dir=$(composer config cache-files-dir)" >> $GITHUB_OUTPUT

        # https://help.github.com/en/actions/configuring-and-managing-workflows/caching-dependencies-to-speed-up-workflows
      - name: Cache composer dependencies
        uses: actions/cache@v4
        with:
          path: ${{ steps.composer-cache.outputs.dir }}
          key: ${{ runner.os }}-composer-${{ hashFiles('**/composer.lock') }}
          restore-keys: ${{ runner.os }}-composer-

      - name: Install Composer dependencies
        run: composer install --no-progress --no-suggest --prefer-dist --no-scripts

      - name: Create folder
        run: mkdir -p var/data

      - name: Run Unit Tests
        run: vendor/bin/phpunit

      - name: Create Test Data Artifact
        uses: actions/upload-artifact@v4
        with:
          name: tests
          path: var/browser
  build:
    name: Build
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@master

      - name: Setup PHP, extensions and composer with shivammathur/setup-php
        uses: shivammathur/setup-php@v2
        with:
           php-version: "8.3"
           tools: composer, phpcs, phpstan
           coverage: none

      - name: Check PSR12 code style (PHP_CodeSniffer)
        run: phpcs --standard=PSR12 -n src

      # Composer
      - name: Get composer cache directory
        id: composer-cache
        run: echo "dir=$(composer config cache-files-dir)" >> $GITHUB_OUTPUT

        # https://help.github.com/en/actions/configuring-and-managing-workflows/caching-dependencies-to-speed-up-workflows
      - name: Cache composer dependencies
        uses: actions/cache@v4
        with:
          path: ${{ steps.composer-cache.outputs.dir }}
          key: ${{ runner.os }}-composer-${{ hashFiles('**/composer.lock') }}
          restore-keys: ${{ runner.os }}-composer-

      - name: Install Composer dependencies
        run: export APP_ENV=prod && composer install --no-dev --no-progress --no-suggest --prefer-dist --optimize-autoloader --no-scripts

      # https://github.com/phpstan/phpstan
      - name: Analyse PHP Code (PHPStan)
        run: phpstan analyse --level=8 src

      - name: Move files for artifact
        run: mkdir htdocs && mv importmap.php composer.json composer.lock symfony.lock vendor migrations translations templates public src bin config assets htdocs/

      - name: Archive production artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build
          path: htdocs

  deployment:
    name: Deploy
    runs-on: ubuntu-latest
    environment: production
    needs: [build, unit-tests]
    env:
      SERVER: "${{ secrets.SSH_USERNAME }}@${{ secrets.SSH_HOSTNAME }}"
      PORT: ${{ secrets.SSH_PORT }}
    steps:
      - uses: actions/download-artifact@v4
        with:
          name: build
          path: htdocs
      - name: Create Archive
        run: tar cz --owner=0 --group=0 -f htdocs.tar.gz htdocs
      - name: Create SSH KEY file
        run: 'echo "$SSH_KEY" > key && chmod 600 key'
        shell: bash
        env:
          SSH_KEY: ${{secrets.SSH_KEY}}
      - name: Upload
        run: scp -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null -i key -P "$PORT" htdocs.tar.gz "$SERVER:~/"
      - name: Cleanup old files
        run: ssh -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null -i key -p "$PORT" "$SERVER" 'cd htdocs && rm -rf vendor migrations translations templates src bin config assets'
      - name: Extract Archive
        run: ssh -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null -i key -p "$PORT" "$SERVER" 'tar --no-same-owner --no-same-permissions -xzf htdocs.tar.gz; rm htdocs.tar.gz'
      - name: Add Exec flag to console
        run: ssh -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null -i key -p "$PORT" "$SERVER" 'chmod +x htdocs/bin/*'
      - name: Create Assets
        run: ssh -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null -i key -p "$PORT" "$SERVER" 'cd htdocs; export APP_ENV=prod; bin/console importmap:install; bin/console asset-map:compile'
      - name: Apply Migrations
        run: ssh -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null -i key -p "$PORT" "$SERVER" 'cd htdocs; export APP_ENV=prod; bin/console doctrine:migrations:migrate --no-interaction'
      - name: Clear cache
        run: ssh -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null -i key -p "$PORT" "$SERVER" 'cd htdocs; export APP_ENV=prod; bin/console cache:clear'
